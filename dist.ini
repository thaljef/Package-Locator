name             = Package-Locator
main_module      = lib/Package/Locator.pm
author           = Jeffrey Ryan Thalhammer <jeff@imaginative-software.com>
license          = Perl_5
copyright_holder = Imaginative Software Systems
copyright_year   = 2011

version          = 0.002

[GatherDir]         ; everything under top dir
[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too

; file modifications
[OurPkgVersion]     ; add $VERSION = ... to all files
[PodWeaver]         ; generate Pod
 
; generated files
[License]           ; boilerplate license
[ReadmeFromPod]     ; from Pod (runs after PodWeaver)
 
; t tests
[Test::Compile]     ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case
 
; xt tests
[MetaTests]         ; xt/release/meta-yaml.t
[PodSyntaxTests]    ; xt/release/pod-syntax.t
[PodCoverageTests]  ; xt/release/pod-coverage.t
[Test::Version]     ; xt/release/test-version.t

[Test::Perl::Critic] ; xt/author/critic.t
critic_config = perlcritic.ini 

[Test::PodSpelling] ; xt/release/pod-spell.t
spell_cmd = aspell list
stopwords = VCS
stopwords = PASSed
stopwords = BackPAN
stopwords = DarkPAN

; metadata
[AutoPrereqs]       ; find prereqs from code
[Prereqs]           ; prereqs that aren't findable

[MinimumPerl]       ; determine minimum perl version
[GitHub::Meta]      ; add Github links
[MetaNoIndex]       ; sets 'no_index' in META
directory = t
directory = xt
directory = examples
directory = corpus
 
[MetaProvides::Package] ; add 'provides' to META files
meta_noindex = 1        ; respect prior no_index directives
 
[MetaYAML]          ; generate META.yml (v1.4)
[MetaJSON]          ; generate META.json (v2)
 
; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include 'share/' for File::ShareDir
[ModuleBuild]       ; create Build.PL

; INSTALL file 
[InstallGuide]      ; must come after making Build.PL and/or Makefile.PL

; manifest (after all generated files)
[Manifest]          ; create MANIFEST
 
; before release
[Git::Check]        ; ensure all files checked in
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
[CheckExtraTests]   ; ensure xt/ tests pass
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading
 
; releaser
[UploadToCPAN]      ; uploads to CPAN
 
; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)
 
[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v
 
; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
 
[NextRelease]
 
[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
 
[Git::Push]         ; push repo to remote
push_to = origin
